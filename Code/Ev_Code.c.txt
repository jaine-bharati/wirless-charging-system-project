#include <ArduinoJson.h>
#include "TinyGPS++.h"
#include<LiquidCrystal_I2C.h>

#include <WiFi.h>
#include <PubSubClient.h>
TinyGPSPlus gps;


#include <UrlEncode.h>
#include <HTTPClient.h>

#define MAX_HTTP_RECV_BUFFER 512
static const char *TAG = "HTTP_CLIENT";


String webJSONoutputString="";

String smsurl="https://www.fast2sms.com/dev/bulkV2?authorization=LZoNwn1qVmjEySJH9lFK5cxsCr4t0PI37WMQGiBpfd2u6AgXU8DSX85CfLNHz2iOrtuJpjlaxbYF6cVI&route=q&message=";

String cmsg="";
String encodedurl="";
String latitude="0.0";
String longitude="0.0";


String gpsread="0";

#define RXD2 16
#define TXD2 17


int cmil=0;
int pmil=0;

bool caroccupied=false;


int rpmil=0;
int rcmil=0;

WiFiClient wifiClient;
PubSubClient client(wifiClient);


#define MQTT_SERIAL_PUBLISH_CHGPS "konnect/2023/electriccharginghw"
#define MQTT_SERIAL_RECEIVER_CH "konnect/2023/electricchargingsw"

bool gpsavailable=false;


LiquidCrystal_I2C lcd(0x27,16,2);

#define ANALOG_IN_PIN 35
 
// Floats for ADC voltage & Input voltage
float adc_voltage = 0.0;
float in_voltage = 0.0;
 
// Floats for resistor values in divider (in ohms)
float R1 = 30000.0;
float R2 = 7500.0; 
 
// Float for Reference Voltage
float ref_voltage =3.3;
 
// Integer for ADC value
int adc_value = 0;

int r1=33;
int r2=25;
int r3=26;

int buzzer=13;

int rfid=18;

void setup_wifi() {
    delay(10);
    // We start by connecting to a WiFi network
    Serial.println();
   Serial.print("Connecting to ");
   Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    randomSeed(micros());
     

  delay(2000);
 

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str(),MQTT_USER,MQTT_PASSWORD)) {
        Serial.println("connected");
      //Once connected, publish an announcement...
     // client.publish("/icircuit/presence/ESP32/", "hello world");
      // ... and resubscribe
      client.subscribe(MQTT_SERIAL_RECEIVER_CH);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
   char message[length + 1];
    strncpy (message, (char*)payload, length);
    message[length] = '\0';
    Serial.println(message);
  pdata(message);

  
  
}

void publishSerialDataGps(char *serialData){
  if (!client.connected()) {
    reconnect();
  }
  client.publish(MQTT_SERIAL_PUBLISH_CHGPS, serialData);
}


void setup()
{
   
   pinMode(r1,OUTPUT);
  pinMode(r2,OUTPUT);
  pinMode(buzzer,OUTPUT);
  pinMode(rfid,INPUT);
  pinMode(r3,OUTPUT);
  turnoffrelays();
  turnoffcharging();
  lcd.init();
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0,0);
  lcd.print(" EV CHARGING  ");
  lcd.setCursor(0,1);
  lcd.print("    STATION    ");
  delay(3000);
  lcd.clear();
  lcd.print("Initializing...");
  delay(2000);
  pinMode(r1,OUTPUT);
  pinMode(r2,OUTPUT);
  pinMode(buzzer,OUTPUT);
  turnoffrelays();
  
    Serial.begin(9600);
    
Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
 
setup_wifi();
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
  reconnect();
 
   
    delay(2000);
  
   
    
siren();
delay(1000);
lcd.clear();
lcd.print("Done");
delay(2000);
lcd.clear();
  

   
   

}

void loop()
{
 Serial.println(digitalRead(rfid));
rcmil=millis();

if(digitalRead(rfid)==0)
{
  Serial.println("Car Detected");
  caroccupied=true;
}

   if (!client.connected()) {
    reconnect();
  }

 rcmil=millis();
 

 client.loop();
  cmil=millis();
  adc_value = analogRead(ANALOG_IN_PIN);
   
   // Determine voltage at ADC input
   adc_voltage  = (adc_value * ref_voltage) / 4096.0; 
   
   // Calculate voltage at divider input
   in_voltage = adc_voltage / (R2/(R1+R2)) ; 
   in_voltage=in_voltage+0.8;
//Serial.println(in_voltage);

if(in_voltage>5)
{
  switchsolar();
  lcd.clear();
  lcd.setCursor(0,0);
lcd.print(" CHARGING VOL: ");
lcd.setCursor(0,1);
lcd.print(in_voltage);

  delay(50);
  lcd.clear();
}
else
{
  switchelectric();

}

checkgps();
 if((cmil-pmil)>7000)
{

 if(caroccupied==true)
 {
  lcd.clear();
  lcd.print("CHARGING CONNECT");
  turnoncharging();
  delay(100);
  lcd.clear();
  
 }
 
 generateWebJSONoutputString(); 
 publishSerialDataGps((char*)webJSONoutputString.c_str());
 pmil=cmil;

 //sendUrlHelpMessage();




}




}

void switchsolar()
{
  
digitalWrite(r1,LOW);
digitalWrite(r2,LOW);
lcd.setCursor(0,0);
lcd.print(" CHARGING MODE: ");
lcd.setCursor(0,1);
lcd.print("  SOLAR ENERGY  ");
delay(100);
  
}

void switchelectric()
{
  digitalWrite(r1,HIGH);
digitalWrite(r2,HIGH);
lcd.setCursor(0,0);
lcd.print(" CHARGING MODE: ");
lcd.setCursor(0,1);
lcd.print("  GRID ENERGY   ");
delay(100);
lcd.clear();








}

void turnoffrelays()
{
  digitalWrite(r1,HIGH);
digitalWrite(r2,HIGH);
}


  void siren()
  {
    digitalWrite(buzzer,HIGH);
    delay(200);
    digitalWrite(buzzer,LOW);
    delay(200);
    digitalWrite(buzzer,HIGH);
    delay(200);
    digitalWrite(buzzer,LOW);
    delay(200);
  }


  void shortsiren()
  {
    digitalWrite(buzzer,HIGH);
    delay(200);
    digitalWrite(buzzer,LOW);
    delay(200);
  }

  void checkgps()
 {
   if(Serial2.available()>0)
  {
  while(Serial2.available()>0)//While there are characters to come from the GPS
  {
    
           if (gps.encode(Serial2.read()))
           {
              if (gps.location.isValid())
              {
                  latitude=String(gps.location.lat(), 6);
                
                  longitude=String(gps.location.lng(), 6);

                 // Serial.println(latitude);
                //  Serial.println(longitude);
                 // Serial.println("");
                  gpsavailable=true;
               }
                else
                {
           //     Serial.print(F("INVALID"));
                }
           }
  }
  }
  else
  {
    gpsavailable=false;
  }
 }


void generateWebJSONoutputString() {

   gpsread=latitude+","+longitude;
   webJSONoutputString = "{";
  

  
  

      
      
      webJSONoutputString += "\"gps\":";
     webJSONoutputString += "\"" + String(gpsread)+ "\"";
      
     
     
  
   webJSONoutputString += "}";  
  
  //Serial.println(webJSONoutputString);
}

void sendUrlHelpMessage(String ms)
{
 
  lcd.clear();
  lcd.print("Charging Done");
  delay(2000);
  lcd.clear();
  lcd.print("Sending CHRGSMS");
  delay(2000);
  String ch=ms;
  int chint=ch.toInt();
  chint=chint/5;
  cmsg="Charging Complete. Your charge for charging is : Rs "+ms+" Charging Time:"+String(chint)+" secs";
  encodedurl=smsurl+urlEncode(cmsg)+"&language=english&flash=0&numbers=7619154326";
//7619154326
  //encodedurl=smsurl;
 // Serial.println(encodedurl);
  
sendurlmsg();
encodedurl="";
lcd.clear();
caroccupied=false;
turnoffcharging();
delay(3000);
cmsg="";
}

void sendurlmsg()
{
  HTTPClient http;
 String murl=encodedurl;
    http.begin(murl); //Specify the URL
    Serial.println(murl);
    int httpCode = http.GET();                                        //Make the request
 
    if (httpCode > 0) { //Check for the returning code
 
        String payload = http.getString();
       Serial.println(httpCode);
        if(httpCode==200)
        {
          //  parsedata(payload,1);
          Serial.println(payload);
        }
        
      
      }
 
    else {
   
      //Serial.println("Error on HTTP request");
  
        
    }
 
    http.end(); //Free the resources
  }


 void pdata(String j)
{
  StaticJsonBuffer<200> jsonBuffer;

  String injson=j;
  Serial.println(injson);

  if(injson.indexOf('{') && injson.indexOf('}'))
  {
    int a=injson.indexOf('{');
    int b=injson.indexOf('}');

    
    injson=injson.substring(a,b+1);
  }
  JsonObject& root = jsonBuffer.parseObject(injson);

  // Test if parsing succeeds.
  if (!root.success()) {
    Serial.println("parseObject() failed");

    return;
  }

  else
  {

Serial.println("json Success");

String stat=root["status"];
Serial.println(stat);
Serial.println("Sending msg");
sendUrlHelpMessage(stat);
caroccupied=false;







}

  
 
  }


void turnoffcharging()
{
  digitalWrite(r3,HIGH);
}

void turnoncharging()
{
  digitalWrite(r3,LOW);
}